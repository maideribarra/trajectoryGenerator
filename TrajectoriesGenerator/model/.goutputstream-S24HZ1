class Encoder(nn.Module):
    def __init__(self, input_dim, hid_dim, n_layers, dropout):
        super().__init__()        
        self.hid_dim = hid_dim
        self.n_layers = n_layers        
        #self.embedding = nn.Embedding(input_dim, emb_dim)        
        #self.rnn = nn.LSTM(emb_dim, hid_dim, num_layers=n_layers, dropout=dropout)
        self.rnn = nn.LSTM(input_dim, hid_dim, num_layers=n_layers, dropout=dropout)        
        self.dropout = nn.Dropout(dropout)
    def forward(self, src):
        # src : [sen_len, batch_size]
        #embedded = self.dropout(self.embedding(src))
        embedded = self.dropout(src)
        # embedded : [sen_len, batch_size, emb_dim]
        outputs, (hidden, cell) = self.rnn(embedded)
        # outputs = [sen_len, batch_size, hid_dim * n_directions]
        # hidden = [n_layers * n_direction, batch_size, hid_dim]
        # cell = [n_layers * n_direction, batch_size, hid_dim]
        return hidden, cell
